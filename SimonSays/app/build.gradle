buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.13.0'
    classpath 'org.robolectric:robolectric-gradle-plugin:0.13.2'
  }
}
apply plugin: 'com.android.application'
apply plugin: 'robolectric'

repositories {
  jcenter()
}

android {
  compileSdkVersion 19
  buildToolsVersion "20.0.0"

  defaultConfig {
    applicationId "com.esrlabs.simonsays"
    minSdkVersion 17
    targetSdkVersion 19
    versionCode 1
    versionName "1.0"
  }
  buildTypes {
    release {
      runProguard false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
}

dependencies {
  compile project(":lib")
  androidTestCompile 'org.hamcrest:hamcrest-core:1.3'
  androidTestCompile 'org.hamcrest:hamcrest-library:1.3'

  androidTestCompile('junit:junit:4.11') {
    exclude module: 'hamcrest-core'
  }
  androidTestCompile('org.robolectric:robolectric:2.3') {
    exclude module: 'classworlds'
    exclude module: 'commons-logging'
    exclude module: 'httpclient'
    exclude module: 'maven-artifact'
    exclude module: 'maven-artifact-manager'
    exclude module: 'maven-error-diagnostics'
    exclude module: 'maven-model'
    exclude module: 'maven-project'
    exclude module: 'maven-settings'
    exclude module: 'plexus-container-default'
    exclude module: 'plexus-interpolation'
    exclude module: 'plexus-utils'
    exclude module: 'wagon-file'
    exclude module: 'wagon-http-lightweight'
    exclude module: 'wagon-provider-api'
  }
  androidTestCompile 'org.mockito:mockito-all:1.9.5'
  compile 'com.android.support:support-v4:20.0.0'
}


import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.logging.StyledTextOutputFactory

import static org.gradle.logging.StyledTextOutput.Style

robolectric {

  def out = services.get(StyledTextOutputFactory).create("colored-test-output")
  out.style(Style.Normal)

  afterTest { descriptor, result ->
    def style = result.failedTestCount > 0 ? Style.Failure : Style.Success
    out.withStyle(style).println("Test ${descriptor.className}#$descriptor.name: $result")
    result.getException()?.printStackTrace();
  }

}

task launchDebug(type: Exec, dependsOn: 'installDebug') {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    commandLine 'cmd', '/c', 'adb', 'shell', 'am', 'start', '-n', 'com.esrlabs.simonsays/.NewGameActivity'
  } else {
    commandLine 'adb', 'shell', 'am', 'start', '-n', 'com.esrlabs.simonsays/.NewGameActivity'
  }
}

